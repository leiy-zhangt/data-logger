; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --gnu -o.\objects\stm32f4xx_cryp_tdes.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\stm32f4xx_cryp_tdes.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I..\Basic\inc -I..\HardWare\IIC -I..\HardWare\SPI -I..\HardWare\USART -I..\HardWare\W25QXX -I..\System\delay -I..\System\sys -I..\User -I..\CMSIS -I.\RTE\_Target_1 -ID:\ProgramFile\Keil5\Keil\STM32F4xx_DFP\2.13.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -ID:\ProgramFile\Keil5\ARM\CMSIS\Include -D__UVISION_VERSION=525 -DSTM32F405xx -DSTM32F40_41xxx -DUSE_STDPERIPH_DRIVER --omf_browse=.\objects\stm32f4xx_cryp_tdes.crf ..\Basic\src\stm32f4xx_cryp_tdes.c]
                          THUMB

                          AREA ||i.CRYP_TDES_CBC||, CODE, READONLY, ALIGN=1

                  CRYP_TDES_CBC PROC
;;;207      */
;;;208    ErrorStatus CRYP_TDES_CBC(uint8_t Mode, uint8_t Key[24], uint8_t InitVectors[8],
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;209                              uint8_t *Input, uint32_t Ilength, uint8_t *Output)
;;;210    {
000004  b095              SUB      sp,sp,#0x54
000006  4680              MOV      r8,r0
000008  4689              MOV      r9,r1
00000a  4692              MOV      r10,r2
00000c  469b              MOV      r11,r3
;;;211      CRYP_InitTypeDef TDES_CRYP_InitStructure;
;;;212      CRYP_KeyInitTypeDef TDES_CRYP_KeyInitStructure;
;;;213      CRYP_IVInitTypeDef TDES_CRYP_IVInitStructure;
;;;214      __IO uint32_t counter = 0;
00000e  2000              MOVS     r0,#0
000010  9004              STR      r0,[sp,#0x10]
;;;215      uint32_t busystatus = 0;
000012  9003              STR      r0,[sp,#0xc]
;;;216      ErrorStatus status = SUCCESS;
000014  2001              MOVS     r0,#1
000016  9002              STR      r0,[sp,#8]
;;;217      uint32_t keyaddr    = (uint32_t)Key;
000018  464c              MOV      r4,r9
;;;218      uint32_t inputaddr  = (uint32_t)Input;
00001a  465d              MOV      r5,r11
;;;219      uint32_t outputaddr = (uint32_t)Output;
00001c  9e1f              LDR      r6,[sp,#0x7c]
;;;220      uint32_t ivaddr     = (uint32_t)InitVectors;
00001e  4657              MOV      r7,r10
;;;221      uint32_t i = 0;
000020  2000              MOVS     r0,#0
000022  9001              STR      r0,[sp,#4]
;;;222    
;;;223      /* Crypto structures initialisation*/
;;;224      CRYP_KeyStructInit(&TDES_CRYP_KeyInitStructure);
000024  a809              ADD      r0,sp,#0x24
000026  f7fffffe          BL       CRYP_KeyStructInit
;;;225    
;;;226      /* Crypto Init for Encryption process */
;;;227      if(Mode == MODE_ENCRYPT) /* TDES encryption */
00002a  f1b80f01          CMP      r8,#1
00002e  d102              BNE      |L1.54|
;;;228      {
;;;229        TDES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Encrypt;
000030  2000              MOVS     r0,#0
000032  9011              STR      r0,[sp,#0x44]
000034  e001              B        |L1.58|
                  |L1.54|
;;;230      }
;;;231      else
;;;232      {
;;;233        TDES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
000036  2004              MOVS     r0,#4
000038  9011              STR      r0,[sp,#0x44]
                  |L1.58|
;;;234      }
;;;235      TDES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_TDES_CBC;
00003a  2008              MOVS     r0,#8
00003c  9012              STR      r0,[sp,#0x48]
;;;236      TDES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
00003e  2080              MOVS     r0,#0x80
000040  9013              STR      r0,[sp,#0x4c]
;;;237    
;;;238      CRYP_Init(&TDES_CRYP_InitStructure);
000042  a811              ADD      r0,sp,#0x44
000044  f7fffffe          BL       CRYP_Init
;;;239    
;;;240      /* Key Initialisation */
;;;241      TDES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
000048  6820              LDR      r0,[r4,#0]
00004a  ba00              REV      r0,r0
00004c  900b              STR      r0,[sp,#0x2c]
;;;242      keyaddr+=4;
00004e  1d24              ADDS     r4,r4,#4
;;;243      TDES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
000050  6820              LDR      r0,[r4,#0]
000052  ba00              REV      r0,r0
000054  900c              STR      r0,[sp,#0x30]
;;;244      keyaddr+=4;
000056  1d24              ADDS     r4,r4,#4
;;;245      TDES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
000058  6820              LDR      r0,[r4,#0]
00005a  ba00              REV      r0,r0
00005c  900d              STR      r0,[sp,#0x34]
;;;246      keyaddr+=4;
00005e  1d24              ADDS     r4,r4,#4
;;;247      TDES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
000060  6820              LDR      r0,[r4,#0]
000062  ba00              REV      r0,r0
000064  900e              STR      r0,[sp,#0x38]
;;;248      keyaddr+=4;
000066  1d24              ADDS     r4,r4,#4
;;;249      TDES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
000068  6820              LDR      r0,[r4,#0]
00006a  ba00              REV      r0,r0
00006c  900f              STR      r0,[sp,#0x3c]
;;;250      keyaddr+=4;
00006e  1d24              ADDS     r4,r4,#4
;;;251      TDES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
000070  6820              LDR      r0,[r4,#0]
000072  ba00              REV      r0,r0
000074  9010              STR      r0,[sp,#0x40]
;;;252      CRYP_KeyInit(& TDES_CRYP_KeyInitStructure);
000076  a809              ADD      r0,sp,#0x24
000078  f7fffffe          BL       CRYP_KeyInit
;;;253    
;;;254      /* Initialization Vectors */
;;;255      TDES_CRYP_IVInitStructure.CRYP_IV0Left = __REV(*(uint32_t*)(ivaddr));
00007c  6838              LDR      r0,[r7,#0]
00007e  ba00              REV      r0,r0
000080  9005              STR      r0,[sp,#0x14]
;;;256      ivaddr+=4;
000082  1d3f              ADDS     r7,r7,#4
;;;257      TDES_CRYP_IVInitStructure.CRYP_IV0Right= __REV(*(uint32_t*)(ivaddr));
000084  6838              LDR      r0,[r7,#0]
000086  ba00              REV      r0,r0
000088  9006              STR      r0,[sp,#0x18]
;;;258      CRYP_IVInit(&TDES_CRYP_IVInitStructure);
00008a  a805              ADD      r0,sp,#0x14
00008c  f7fffffe          BL       CRYP_IVInit
;;;259    
;;;260      /* Flush IN/OUT FIFO */
;;;261      CRYP_FIFOFlush();
000090  f7fffffe          BL       CRYP_FIFOFlush
;;;262    
;;;263      /* Enable Crypto processor */
;;;264      CRYP_Cmd(ENABLE);
000094  2001              MOVS     r0,#1
000096  f7fffffe          BL       CRYP_Cmd
;;;265    
;;;266      if(CRYP_GetCmdStatus() == DISABLE)
00009a  f7fffffe          BL       CRYP_GetCmdStatus
00009e  b918              CBNZ     r0,|L1.168|
;;;267      {
;;;268        /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
;;;269           the CRYP peripheral (please check the device sales type. */
;;;270        return(ERROR);
0000a0  2000              MOVS     r0,#0
                  |L1.162|
;;;271      }
;;;272      
;;;273      for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
;;;274      {
;;;275        /* Write the Input block in the Input FIFO */
;;;276        CRYP_DataIn(*(uint32_t*)(inputaddr));
;;;277        inputaddr+=4;
;;;278        CRYP_DataIn(*(uint32_t*)(inputaddr));
;;;279        inputaddr+=4;
;;;280    
;;;281        /* Wait until the complete message has been processed */
;;;282        counter = 0;
;;;283        do
;;;284        {
;;;285          busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
;;;286          counter++;
;;;287        }while ((counter != TDESBUSY_TIMEOUT) && (busystatus != RESET));
;;;288    
;;;289        if (busystatus != RESET)
;;;290       {
;;;291           status = ERROR;
;;;292        }
;;;293        else
;;;294        {
;;;295    
;;;296          /* Read the Output block from the Output FIFO */
;;;297          *(uint32_t*)(outputaddr) = CRYP_DataOut();
;;;298          outputaddr+=4;
;;;299          *(uint32_t*)(outputaddr) = CRYP_DataOut();
;;;300          outputaddr+=4;
;;;301        }
;;;302      }
;;;303    
;;;304      /* Disable Crypto */
;;;305      CRYP_Cmd(DISABLE);
;;;306    
;;;307      return status; 
;;;308    }
0000a2  b015              ADD      sp,sp,#0x54
0000a4  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.168|
0000a8  2000              MOVS     r0,#0                 ;273
0000aa  9001              STR      r0,[sp,#4]            ;273
0000ac  e028              B        |L1.256|
                  |L1.174|
0000ae  6828              LDR      r0,[r5,#0]            ;276
0000b0  f7fffffe          BL       CRYP_DataIn
0000b4  1d2d              ADDS     r5,r5,#4              ;277
0000b6  6828              LDR      r0,[r5,#0]            ;278
0000b8  f7fffffe          BL       CRYP_DataIn
0000bc  1d2d              ADDS     r5,r5,#4              ;279
0000be  2000              MOVS     r0,#0                 ;282
0000c0  9004              STR      r0,[sp,#0x10]         ;282
0000c2  bf00              NOP                            ;283
                  |L1.196|
0000c4  2010              MOVS     r0,#0x10              ;285
0000c6  f7fffffe          BL       CRYP_GetFlagStatus
0000ca  9003              STR      r0,[sp,#0xc]          ;285
0000cc  9804              LDR      r0,[sp,#0x10]         ;286
0000ce  1c40              ADDS     r0,r0,#1              ;286
0000d0  9004              STR      r0,[sp,#0x10]         ;286
0000d2  9804              LDR      r0,[sp,#0x10]         ;287
0000d4  f5b03f80          CMP      r0,#0x10000           ;287
0000d8  d002              BEQ      |L1.224|
0000da  9803              LDR      r0,[sp,#0xc]          ;287
0000dc  2800              CMP      r0,#0                 ;287
0000de  d1f1              BNE      |L1.196|
                  |L1.224|
0000e0  9803              LDR      r0,[sp,#0xc]          ;289
0000e2  b110              CBZ      r0,|L1.234|
0000e4  2000              MOVS     r0,#0                 ;291
0000e6  9002              STR      r0,[sp,#8]            ;291
0000e8  e007              B        |L1.250|
                  |L1.234|
0000ea  f7fffffe          BL       CRYP_DataOut
0000ee  6030              STR      r0,[r6,#0]            ;297
0000f0  1d36              ADDS     r6,r6,#4              ;298
0000f2  f7fffffe          BL       CRYP_DataOut
0000f6  6030              STR      r0,[r6,#0]            ;299
0000f8  1d36              ADDS     r6,r6,#4              ;300
                  |L1.250|
0000fa  9801              LDR      r0,[sp,#4]            ;273
0000fc  3008              ADDS     r0,r0,#8              ;273
0000fe  9001              STR      r0,[sp,#4]            ;273
                  |L1.256|
000100  991e              LDR      r1,[sp,#0x78]         ;273
000102  9801              LDR      r0,[sp,#4]            ;273
000104  4288              CMP      r0,r1                 ;273
000106  d202              BCS      |L1.270|
000108  9802              LDR      r0,[sp,#8]            ;273
00010a  2800              CMP      r0,#0                 ;273
00010c  d1cf              BNE      |L1.174|
                  |L1.270|
00010e  2000              MOVS     r0,#0                 ;305
000110  f7fffffe          BL       CRYP_Cmd
000114  9802              LDR      r0,[sp,#8]            ;307
000116  e7c4              B        |L1.162|
;;;309    /**
                          ENDP


                          AREA ||i.CRYP_TDES_ECB||, CODE, READONLY, ALIGN=1

                  CRYP_TDES_ECB PROC
;;;99       */
;;;100    ErrorStatus CRYP_TDES_ECB(uint8_t Mode, uint8_t Key[24], uint8_t *Input, 
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;101                              uint32_t Ilength, uint8_t *Output)
;;;102    {
000004  b08f              SUB      sp,sp,#0x3c
000006  4607              MOV      r7,r0
000008  4688              MOV      r8,r1
00000a  4691              MOV      r9,r2
00000c  469a              MOV      r10,r3
;;;103      CRYP_InitTypeDef TDES_CRYP_InitStructure;
;;;104      CRYP_KeyInitTypeDef TDES_CRYP_KeyInitStructure;
;;;105      __IO uint32_t counter = 0;
00000e  2000              MOVS     r0,#0
000010  9002              STR      r0,[sp,#8]
;;;106      uint32_t busystatus = 0;
000012  4683              MOV      r11,r0
;;;107      ErrorStatus status = SUCCESS;
000014  2001              MOVS     r0,#1
000016  9001              STR      r0,[sp,#4]
;;;108      uint32_t keyaddr    = (uint32_t)Key;
000018  4644              MOV      r4,r8
;;;109      uint32_t inputaddr  = (uint32_t)Input;
00001a  464d              MOV      r5,r9
;;;110      uint32_t outputaddr = (uint32_t)Output;
00001c  9e18              LDR      r6,[sp,#0x60]
;;;111      uint32_t i = 0;
00001e  2000              MOVS     r0,#0
000020  9000              STR      r0,[sp,#0]
;;;112    
;;;113      /* Crypto structures initialisation*/
;;;114      CRYP_KeyStructInit(&TDES_CRYP_KeyInitStructure);
000022  a803              ADD      r0,sp,#0xc
000024  f7fffffe          BL       CRYP_KeyStructInit
;;;115    
;;;116      /* Crypto Init for Encryption process */
;;;117      if(Mode == MODE_ENCRYPT) /* TDES encryption */
000028  2f01              CMP      r7,#1
00002a  d102              BNE      |L2.50|
;;;118      {
;;;119         TDES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Encrypt;
00002c  2000              MOVS     r0,#0
00002e  900b              STR      r0,[sp,#0x2c]
000030  e001              B        |L2.54|
                  |L2.50|
;;;120      }
;;;121      else /*if(Mode == MODE_DECRYPT)*/ /* TDES decryption */
;;;122      {
;;;123         TDES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
000032  2004              MOVS     r0,#4
000034  900b              STR      r0,[sp,#0x2c]
                  |L2.54|
;;;124      }
;;;125    
;;;126      TDES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_TDES_ECB;
000036  2000              MOVS     r0,#0
000038  900c              STR      r0,[sp,#0x30]
;;;127      TDES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
00003a  2080              MOVS     r0,#0x80
00003c  900d              STR      r0,[sp,#0x34]
;;;128      CRYP_Init(&TDES_CRYP_InitStructure);
00003e  a80b              ADD      r0,sp,#0x2c
000040  f7fffffe          BL       CRYP_Init
;;;129    
;;;130      /* Key Initialisation */
;;;131      TDES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
000044  6820              LDR      r0,[r4,#0]
000046  ba00              REV      r0,r0
000048  9005              STR      r0,[sp,#0x14]
;;;132      keyaddr+=4;
00004a  1d24              ADDS     r4,r4,#4
;;;133      TDES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
00004c  6820              LDR      r0,[r4,#0]
00004e  ba00              REV      r0,r0
000050  9006              STR      r0,[sp,#0x18]
;;;134      keyaddr+=4;
000052  1d24              ADDS     r4,r4,#4
;;;135      TDES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
000054  6820              LDR      r0,[r4,#0]
000056  ba00              REV      r0,r0
000058  9007              STR      r0,[sp,#0x1c]
;;;136      keyaddr+=4;
00005a  1d24              ADDS     r4,r4,#4
;;;137      TDES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
00005c  6820              LDR      r0,[r4,#0]
00005e  ba00              REV      r0,r0
000060  9008              STR      r0,[sp,#0x20]
;;;138      keyaddr+=4;
000062  1d24              ADDS     r4,r4,#4
;;;139      TDES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
000064  6820              LDR      r0,[r4,#0]
000066  ba00              REV      r0,r0
000068  9009              STR      r0,[sp,#0x24]
;;;140      keyaddr+=4;
00006a  1d24              ADDS     r4,r4,#4
;;;141      TDES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
00006c  6820              LDR      r0,[r4,#0]
00006e  ba00              REV      r0,r0
000070  900a              STR      r0,[sp,#0x28]
;;;142      CRYP_KeyInit(& TDES_CRYP_KeyInitStructure);
000072  a803              ADD      r0,sp,#0xc
000074  f7fffffe          BL       CRYP_KeyInit
;;;143    
;;;144      /* Flush IN/OUT FIFO */
;;;145      CRYP_FIFOFlush();
000078  f7fffffe          BL       CRYP_FIFOFlush
;;;146    
;;;147      /* Enable Crypto processor */
;;;148      CRYP_Cmd(ENABLE);
00007c  2001              MOVS     r0,#1
00007e  f7fffffe          BL       CRYP_Cmd
;;;149    
;;;150      if(CRYP_GetCmdStatus() == DISABLE)
000082  f7fffffe          BL       CRYP_GetCmdStatus
000086  b918              CBNZ     r0,|L2.144|
;;;151      {
;;;152        /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
;;;153           the CRYP peripheral (please check the device sales type. */
;;;154        return(ERROR);
000088  2000              MOVS     r0,#0
                  |L2.138|
;;;155      }
;;;156      for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
;;;157      {
;;;158        /* Write the Input block in the Input FIFO */
;;;159        CRYP_DataIn(*(uint32_t*)(inputaddr));
;;;160        inputaddr+=4;
;;;161        CRYP_DataIn(*(uint32_t*)(inputaddr));
;;;162        inputaddr+=4;
;;;163    
;;;164        /* Wait until the complete message has been processed */
;;;165        counter = 0;
;;;166        do
;;;167        {
;;;168          busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
;;;169          counter++;
;;;170        }while ((counter != TDESBUSY_TIMEOUT) && (busystatus != RESET));
;;;171    
;;;172        if (busystatus != RESET)
;;;173        {
;;;174           status = ERROR;
;;;175        }
;;;176        else
;;;177        {
;;;178    
;;;179          /* Read the Output block from the Output FIFO */
;;;180          *(uint32_t*)(outputaddr) = CRYP_DataOut();
;;;181          outputaddr+=4;
;;;182          *(uint32_t*)(outputaddr) = CRYP_DataOut();
;;;183          outputaddr+=4;
;;;184        }
;;;185      }
;;;186    
;;;187      /* Disable Crypto */
;;;188      CRYP_Cmd(DISABLE);
;;;189    
;;;190      return status; 
;;;191    }
00008a  b00f              ADD      sp,sp,#0x3c
00008c  e8bd8ff0          POP      {r4-r11,pc}
                  |L2.144|
000090  2000              MOVS     r0,#0                 ;156
000092  9000              STR      r0,[sp,#0]            ;156
000094  e029              B        |L2.234|
                  |L2.150|
000096  6828              LDR      r0,[r5,#0]            ;159
000098  f7fffffe          BL       CRYP_DataIn
00009c  1d2d              ADDS     r5,r5,#4              ;160
00009e  6828              LDR      r0,[r5,#0]            ;161
0000a0  f7fffffe          BL       CRYP_DataIn
0000a4  1d2d              ADDS     r5,r5,#4              ;162
0000a6  2000              MOVS     r0,#0                 ;165
0000a8  9002              STR      r0,[sp,#8]            ;165
0000aa  bf00              NOP                            ;166
                  |L2.172|
0000ac  2010              MOVS     r0,#0x10              ;168
0000ae  f7fffffe          BL       CRYP_GetFlagStatus
0000b2  4683              MOV      r11,r0                ;168
0000b4  9802              LDR      r0,[sp,#8]            ;169
0000b6  1c40              ADDS     r0,r0,#1              ;169
0000b8  9002              STR      r0,[sp,#8]            ;169
0000ba  9802              LDR      r0,[sp,#8]            ;170
0000bc  f5b03f80          CMP      r0,#0x10000           ;170
0000c0  d002              BEQ      |L2.200|
0000c2  f1bb0f00          CMP      r11,#0                ;170
0000c6  d1f1              BNE      |L2.172|
                  |L2.200|
0000c8  f1bb0f00          CMP      r11,#0                ;172
0000cc  d002              BEQ      |L2.212|
0000ce  2000              MOVS     r0,#0                 ;174
0000d0  9001              STR      r0,[sp,#4]            ;174
0000d2  e007              B        |L2.228|
                  |L2.212|
0000d4  f7fffffe          BL       CRYP_DataOut
0000d8  6030              STR      r0,[r6,#0]            ;180
0000da  1d36              ADDS     r6,r6,#4              ;181
0000dc  f7fffffe          BL       CRYP_DataOut
0000e0  6030              STR      r0,[r6,#0]            ;182
0000e2  1d36              ADDS     r6,r6,#4              ;183
                  |L2.228|
0000e4  9800              LDR      r0,[sp,#0]            ;156
0000e6  3008              ADDS     r0,r0,#8              ;156
0000e8  9000              STR      r0,[sp,#0]            ;156
                  |L2.234|
0000ea  9800              LDR      r0,[sp,#0]            ;156
0000ec  4550              CMP      r0,r10                ;156
0000ee  d202              BCS      |L2.246|
0000f0  9801              LDR      r0,[sp,#4]            ;156
0000f2  2800              CMP      r0,#0                 ;156
0000f4  d1cf              BNE      |L2.150|
                  |L2.246|
0000f6  2000              MOVS     r0,#0                 ;188
0000f8  f7fffffe          BL       CRYP_Cmd
0000fc  9801              LDR      r0,[sp,#4]            ;190
0000fe  e7c4              B        |L2.138|
;;;192    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\Basic\\src\\stm32f4xx_cryp_tdes.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___21_stm32f4xx_cryp_tdes_c_2fc87a0d____REV16|
#line 129 "..\\CMSIS\\core_cmInstr.h"
|__asm___21_stm32f4xx_cryp_tdes_c_2fc87a0d____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___21_stm32f4xx_cryp_tdes_c_2fc87a0d____REVSH|
#line 144
|__asm___21_stm32f4xx_cryp_tdes_c_2fc87a0d____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
